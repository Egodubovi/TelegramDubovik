import telebot
from telebot import types
import random
import config
import sqlighter
import battle
import sqlite3

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def start_message(message):
    video = open('static/jack.mp4', 'rb')
    bot.send_animation(message.chat.id, video)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!'
                     f'\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∂–º–∏ /help')
    sqlighter.new_user(message.from_user.id, message.from_user.first_name)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–° –±–æ—Ç–æ–º ü§ñ', callback_data='bots')
    item2 = types.InlineKeyboardButton('–° –¥—Ä—É–≥–æ–º üë¨', callback_data='friends')
    markup.add(item1, item2)
    bot.send_message(message.chat.id, f'–ë–∏—Ç–≤—ã —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è! –° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)


@bot.message_handler(commands=['help'])
def help_message(message):
    markup = types.InlineKeyboardMarkup(row_width=4)
    item1 = types.InlineKeyboardButton('–ú–æ–∏ –¥—Ä—É–∑—å—è üë¨', callback_data='my_friends')
    item2 = types.InlineKeyboardButton('–ú–æ–∏ –ø–æ–±–µ–¥—ã üëç', callback_data='my_wins')
    item3 = types.InlineKeyboardButton('–ú–æ–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è üëé', callback_data='my_loses')
    item4 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ–π üëä', callback_data='fight')
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, f'–≠—Ç–æ –ë–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π.\n—Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –∫–∞–∫'
                                      f' —Å –¥—Ä—É–∑—å—è–º–∏(–µ—Å–ª–∏ –æ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å), —Ç–∞–∫ –∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É —Å –±–æ—Ç–æ–º.'
                                      f'\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏ /start. –î–ª—è –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏ /stop .\n')
    bot.send_message(message.chat.id, '–¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def answer(message):
    bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.data == 'bots':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  reply_markup=None, text='–•–æ—Ä–æ—à–æ!')
            player_ships = battle.enemy_ships1
            points_d = 0
            a, b = random.randint(0, 9), random.randint(0, 9)
            if player_ships[a][b] == '‚ñá':
                points_d += 1
            if points_d == 20:
                bot.send_message(call.message.chat.id, '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
                sqlighter.lose(call.message.from_user.id)
            player_ships[a][b] = '√ó'

            bot.send_message(call.message.chat.id, f'–í–∞—à–µ –ø–æ–ª–µ:\n'
                                                   f'    A   B   C   D   E   F   G   H   I   J\n'
                                                   f'1  {" ".join(player_ships[0])}\n'
                                                   f'2  {" ".join(player_ships[1])}\n'
                                                   f'3  {" ".join(player_ships[2])}\n'
                                                   f'4  {" ".join(player_ships[3])}\n'
                                                   f'5  {" ".join(player_ships[4])}\n'
                                                   f'6  {" ".join(player_ships[5])}\n'
                                                   f'7  {" ".join(player_ships[6])}\n'
                                                   f'8  {" ".join(player_ships[7])}\n'
                                                   f'9  {" ".join(player_ships[8])}\n'
                                                   f'10{" ".join(player_ships[9])}\n'
                                                   f'–í–∞—Å –æ—Ç–∞–∫–æ–≤–∞–ª–∏: {chr(b + 97)}{a + 1}')
        elif call.data == 'friends':
            bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç–ø–µ–Ω.')
        elif call.data == 'my_friends':
            bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç–ø–µ–Ω.')
        elif call.data == 'my_wins':
            bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç–ø–µ–Ω.')
        elif call.data == 'my_loses':
            bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –¥–æ—Å—Ç–ø–µ–Ω.')
        elif call.data == 'fight':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('–° –±–æ—Ç–æ–º ü§ñ', callback_data='bots')
            item2 = types.InlineKeyboardButton('–° –¥—Ä—É–≥–æ–º üë¨', callback_data='friends')
            markup.add(item1, item2)
            bot.send_message(call.message.chat.id, f'–ë–∏—Ç–≤—ã —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è! –° –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)
    except Exception as e:
        pass


if __name__ == '__main__':
    bot.infinity_polling()
